<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html">
    <h:head>
        <title>Storage Dashboard</title>
        <link rel="shortcut icon" href=""/>
        <script src="resources/js/c3.min.js" type="text/javascript"></script>
        <script src="resources/js/d3.min.js" type="text/javascript"></script>
        <link href="resources/css/c3.min.css" rel="stylesheet" type="text/css"/>
        <link href="resources/css/style.css" rel="stylesheet" type="text/css"/>
    </h:head>
    <h:body>
        <div id="MV3">
            <h3 style="text-align: center">MV3 Storage</h3>

            <div id="chart1">
                <div id="capacities1"></div>
                <input id="btn_capacities1" class="back_cap" type="button" value="Back"></input>
            </div>
            <div id="chart2">
                <div id="capacities2"></div>
                <input id="btn_capacities2" class="back_cap" type="button" value="Back"></input>
            </div>
            <div id="chart3">
                <div id="capacities3"></div>
                <input id="btn_capacities3" class="back_cap" type="button" value="Back"></input>
            </div>
        </div>

        <div id="MV2">
            <h3 style="text-align: center;">MV2 Storage</h3>
            <div id="chart1">
                <div id="capacities4"></div>
                <input id="btn_capacities4" class="back_cap" type="button" value="Back"></input>
            </div>
            <div id="chart2">
                <div id="capacities5"></div>
                <input id="btn_capacities5" class="back_cap" type="button" value="Back"></input>
            </div>
            <div id="chart3">
                <div id="capacities6"></div>
                <input id="btn_capacities6" class="back_cap" type="button" value="Back"></input>
            </div>
        </div>

        <script>
            var old_data;
            var testvar1 = [];
            data1 = Math.floor(Math.random() * 60) + 1;
            data2 = 60 - data1;
            var dataString = "#{controller.findAll()}".trim();
            backup_data = #{controller.findAllBkp()};
            var succeeded = [];
            var failed = [];
            succeeded.push("Succeeded");
            failed.push("Failed");
            for (i = 0; i &lt; backup_data.length; i++) {
            succeeded.push(backup_data[i]["succeeded"]);
            }
            for (i = 0; i &lt; backup_data.length; i++) {
            failed.push(backup_data[i]["failed"]);
            }
            console.log(backup_data);
            var dataList = dataString.split(",");
            console.log(dataString);
            function drawBarChart() {
            // this is the first chart
            var chart1 = c3.generate({
            bindto: "#capacities1",
                    color: {
                    pattern: ['#1f77b4', '#aec7e8']
                    },
                    data: {
                    x: 'x',
                            columns: [
                            ['x', 'MV3 VMAX', 'MV2 VMAX'],
                            ['Total (GBs)', 244000, 244000],
                            ['Used (GBs)', 200000, 140000]
                            ],
                            type: 'bar',
                            order: "null",
                            labels: true,
                            onclick: function (d, element) {
                            old_data = d;
                            if (old_data.id === "Used (GBs)") {
                            chart1.load({
                            unload: ['VMAX-3', 'Isilon', 'Unity', 'SMRC Unity', 'XtremIO', 'Total (GBs)', 'Used (GBs)'],
                                    columns: [
                                    ['x', 'VPLEX', 'Infra', 'AIX', 'OVM'],
                                    ['Utilization', 50, 50, 50, 50]
                                    ]
                            });
                            }
                            }
                    },
                    axis: {
                    x: {
                    type: 'category' // this needed to load string x value
                    },
                            y: {
                            label: 'Capacity'
                            }
                    }
            });
            d3.select('#btn_capacities1')
                    .on('click', function (d, element) {
                    chart1.load({
                    unload: true,
                            columns: [
                            ['x', 'VMAX-3', 'Isilon', 'Unity', 'SMRC Unity', 'XtremIO'],
                            ['Total (GBs)', 90, 200, 160, 400, 10],
                            ['Used (GBs)', 30, 100, 140, 200, 6]
                            ]
                    });
                    });
            // this is the second chart

            var chart2 = c3.generate({
            bindto: "#capacities2",
                    color: {
                    pattern: ['#1f77b4', '#aec7e8']
                    },
                    data: {
                    x: 'x',
                            columns: [
                            ['x', 'VMAX-3', 'Isilon', 'Unity', 'SMRC Unity', 'XtremIO'],
                            ['Total (GBs)', 90, 200, 160, 400, 10],
                            ['Used (GBs)', 30, 100, 140, 200, 6]
                            ],
                            type: 'bar',
                            order: "null",
                            labels: true,
                            onclick: function (d, element) {
                            old_data = d;
                            if (old_data.id === "Used (GBs)") {
                            chart2.load({
                            unload: ['VMAX-3', 'Isilon', 'Unity', 'SMRC Unity', 'XtremIO', 'Total (GBs)', 'Used (GBs)'],
                                    columns: [
                                    ['x', 'VPLEX', 'Infra', 'AIX', 'OVM'],
                                    ['Utilization', 50, 50, 50, 50]
                                    ]
                            });
                            }
                            }
                    },
                    axis: {
                    x: {
                    type: 'category' // this needed to load string x value
                    },
                            y: {
                            label: 'Capacity'
                            }

                    }
            });
            d3.select('#btn_capacities2')
                    .on('click', function (d, element) {
                    chart2.load({
                    unload: true,
                            columns: [
                            ['x', 'VMAX-3', 'Isilon', 'Unity', 'SMRC Unity', 'XtremIO'],
                            ['Total (GBs)', 90, 200, 160, 400, 10],
                            ['Used (GBs)', 30, 100, 140, 200, 6]
                            ]
                    });
                    });
            // this is the third chart

            var chart3 = c3.generate({
            bindto: "#capacities3",
                    color: {
                    pattern: ['#1f77b4', '#aec7e8']
                    },
                    data: {
                    x: 'x',
                            columns: [
                            ['x', 'VMAX-3', 'Isilon', 'Unity', 'SMRC Unity', 'XtremIO'],
                            ['Total (GBs)', 90, 200, 160, 400, 10],
                            ['Used (GBs)', 30, 100, 140, 200, 6]
                            ],
                            type: 'bar',
                            order: "null",
                            labels: true,
                            onclick: function (d, element) {
                            old_data = d;
                            if (old_data.id === "Used (GBs)") {
                            chart3.load({
                            unload: ['VMAX-3', 'Isilon', 'Unity', 'SMRC Unity', 'XtremIO', 'Total (GBs)', 'Used (GBs)'],
                                    columns: [
                                    ['x', 'VPLEX', 'Infra', 'AIX', 'OVM'],
                                    ['Utilization', 50, 50, 50, 50]
                                    ]
                            });
                            }
                            }
                    },
                    axis: {
                    x: {
                    type: 'category' // this needed to load string x value
                    },
                            y: {
                            label: 'Capacity'
                            }

                    }
            });
            d3.select('#btn_capacities3')
                    .on('click', function (d, element) {
                    chart3.load({
                    unload: true,
                            columns: [
                            ['x', 'VMAX-3', 'Isilon', 'Unity', 'SMRC Unity', 'XtremIO'],
                            ['Total (GBs)', 90, 200, 160, 400, 10],
                            ['Used (GBs)', 30, 100, 140, 200, 6]
                            ]
                    });
                    });
            // this is the fourth chart

            var chart4 = c3.generate({
            bindto: "#capacities4",
                    color: {
                    pattern: ['#1f77b4', '#aec7e8']
                    },
                    data: {
                    x: 'x',
                            columns: [
                            ['x', 'VMAX-3', 'Isilon', 'Unity', 'SMRC Unity', 'XtremIO'],
                            ['Total (GBs)', 90, 200, 160, 400, 10],
                            ['Used (GBs)', 30, 100, 140, 200, 6]
                            ],
                            type: 'bar',
                            order: "null",
                            labels: true,
                            onclick: function (d, element) {
                            old_data = d;
                            if (old_data.id === "Used (GBs)") {
                            chart4.load({
                            unload: ['VMAX-3', 'Isilon', 'Unity', 'SMRC Unity', 'XtremIO', 'Total (GBs)', 'Used (GBs)'],
                                    columns: [
                                    ['x', 'VPLEX', 'Infra', 'AIX', 'OVM'],
                                    ['Utilization', 50, 50, 50, 50]
                                    ]
                            });
                            }
                            }
                    },
                    axis: {
                    x: {
                    type: 'category' // this needed to load string x value
                    },
                            y: {
                            label: 'Capacity'
                            }

                    }
            });
            d3.select('#btn_capacities4')
                    .on('click', function (d, element) {
                    chart4.load({
                    unload: true,
                            columns: [
                            ['x', 'VMAX-3', 'Isilon', 'Unity', 'SMRC Unity', 'XtremIO'],
                            ['Total (GBs)', 90, 200, 160, 400, 10],
                            ['Used (GBs)', 30, 100, 140, 200, 6]
                            ]
                    });
                    });
            // this is the fifth chart

            var chart5 = c3.generate({
            bindto: "#capacities5",
                    color: {
                    pattern: ['#1f77b4', '#aec7e8']
                    },
                    data: {
                    x: 'x',
                            columns: [
                            ['x', 'VMAX-3', 'Isilon', 'Unity', 'SMRC Unity', 'XtremIO'],
                            ['Total (GBs)', 90, 200, 160, 400, 10],
                            ['Used (GBs)', 30, 100, 140, 200, 6]
                            ],
                            type: 'bar',
                            order: "null",
                            labels: true,
                            onclick: function (d, element) {
                            old_data = d;
                            if (old_data.id === "Used (GBs)") {
                            chart5.load({
                            unload: ['VMAX-3', 'Isilon', 'Unity', 'SMRC Unity', 'XtremIO', 'Total (GBs)', 'Used (GBs)'],
                                    columns: [
                                    ['x', 'VPLEX', 'Infra', 'AIX', 'OVM'],
                                    ['Utilization', 50, 50, 50, 50]
                                    ]
                            });
                            }
                            }
                    },
                    axis: {
                    x: {
                    type: 'category' // this needed to load string x value
                    },
                            y: {
                            label: 'Capacity'
                            }

                    }
            });
            d3.select('#btn_capacities5')
                    .on('click', function (d, element) {
                    chart5.load({
                    unload: true,
                            columns: [
                            ['x', 'VMAX-3', 'Isilon', 'Unity', 'SMRC Unity', 'XtremIO'],
                            ['Total (GBs)', 90, 200, 160, 400, 10],
                            ['Used (GBs)', 30, 100, 140, 200, 6]
                            ]
                    });
                    });
            // this is the sixth chart

            var chart = c3.generate({
            bindto: "#capacities6",
                    data: {
                    // iris data from R
                    columns: [
                    ['data1', data1],
                    ['data2', data2],
                    ],
                            type: 'pie',
                            pie: {
                                title: "mv3lavun01prv"
                            }

//                        onclick: function (d, i) {
//                            console.log("onclick", d, i);
//                        },
//                        onmouseover: function (d, i) {
//                            console.log("onmouseover", d, i);
//                        },
//                        onmouseout: function (d, i) {
//                            console.log("onmouseout", d, i);
//                        }
                    }
            });
            setTimeout(function () {
            chart.load({
            columns: [
                    succeeded,
                    failed,
            ]
            });
            }, 1500);
            setTimeout(function () {
            chart.unload({
            ids: 'data1'
            });
            chart.unload({
            ids: 'data2'
            });
            }, 2500);
            }

            drawBarChart();

        </script>


    </h:body>
</html>

